// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// ================================
// USER MANAGEMENT
// ================================

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique // Clerk user ID
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  
  // Profile Information
  role          UserRole     @default(STUDENT)
  phoneNumber   String?
  hostel        String?
  roomNumber    String?
  department    String?
  year          String?      // Academic year (1st, 2nd, 3rd, 4th)
  
  // Location & Preferences
  campusLocation String?     // Building/area on campus
  latitude       Float?
  longitude      Float?
  
  // Notification Preferences
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  smsNotifications      Boolean @default(false)
  notificationRadius    Int     @default(1000) // meters
  
  // Dietary Preferences & Allergies
  dietaryRestrictions   String[] // ["vegetarian", "vegan", "gluten-free", etc.]
  allergies            String[] // ["nuts", "dairy", "shellfish", etc.]
  foodPreferences      String[] // ["indian", "chinese", "continental", etc.]
  
  // Gamification
  totalPoints          Int      @default(0)
  currentLevel         Int      @default(1)
  totalFoodSaved       Float    @default(0) // in kg
  totalCarbonSaved     Float    @default(0) // in kg CO2
  totalWaterSaved      Float    @default(0) // in liters
  streakDays           Int      @default(0)
  lastActivityDate     DateTime?
  
  // Account Status
  isActive             Boolean  @default(true)
  isVerified           Boolean  @default(false)
  lastLoginAt          DateTime?
  
  // Timestamps
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  foodListings         FoodListing[]
  pickupRequests       PickupRequest[]
  receivedPickups      PickupRequest[] @relation("ReceivedPickups")
  notifications        Notification[]
  achievements         UserAchievement[]
  reviews              Review[]
  receivedReviews      Review[] @relation("ReceivedReviews")
  reportsMade          Report[] @relation("ReportsMade")
  reportsReceived      Report[] @relation("ReportsReceived")
  eventLogs            EventLog[]
  ngoProfile           NGOProfile?
  adminProfile         AdminProfile?
  
  @@map("users")
}

enum UserRole {
  STUDENT
  STAFF
  FACULTY
  NGO
  ADMIN
  CANTEEN_MANAGER
  EVENT_ORGANIZER
}

// ================================
// FOOD MANAGEMENT
// ================================

model FoodListing {
  id          String   @id @default(cuid())
  
  // Basic Information
  title       String
  description String?
  category    FoodCategory
  cuisine     String?        // "Indian", "Chinese", "Continental", etc.
  
  // Quantity & Serving
  quantity           Float              // Amount in kg/liters/pieces
  quantityUnit       QuantityUnit       @default(KG)
  estimatedServings  Int?               // Number of people it can serve
  originalPrice      Float?             // Original cost of food
  
  // Food Details
  ingredients        String[]           // List of main ingredients
  allergens          String[]           // Known allergens
  dietaryTags        String[]           // ["vegetarian", "vegan", "halal", etc.]
  spiceLevel         SpiceLevel?        // For Indian context
  
  // Safety & Quality
  preparedAt         DateTime           // When food was prepared
  expiresAt          DateTime           // When food expires
  safeUntil          DateTime           // Safe consumption time
  storageInstructions String?           // How to store the food
  reheatingInstructions String?         // How to reheat if needed
  
  // Images & Media
  images             String[]           // Array of image URLs
  
  // Pickup Information
  pickupLocation     String             // Specific location for pickup
  pickupInstructions String?            // Additional pickup instructions
  availableFrom      DateTime           // Available for pickup from
  availableUntil     DateTime           // Available for pickup until
  contactInfo        String?            // Alternative contact information
  
  // Geolocation
  latitude           Float?
  longitude          Float?
  
  // Status & Tracking
  status             FoodStatus         @default(AVAILABLE)
  totalClaimedQty    Float              @default(0)
  remainingQty       Float              // Calculated field
  
  // Analytics
  viewCount          Int                @default(0)
  interestedCount    Int                @default(0)
  
  // Environmental Impact (calculated)
  carbonFootprintSaved Float            @default(0) // kg CO2
  waterFootprintSaved  Float            @default(0) // liters
  
  // Timestamps
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  
  // Relations
  userId             String
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  pickupRequests     PickupRequest[]
  reviews            Review[]
  reports            Report[]
  eventLog           EventLog?
  
  @@map("food_listings")
}

enum FoodCategory {
  PREPARED_FOOD      // Cooked meals, curries, rice, etc.
  SNACKS            // Samosas, chips, biscuits, etc.
  FRUITS            // Fresh fruits
  VEGETABLES        // Fresh vegetables
  DAIRY             // Milk, yogurt, cheese, etc.
  BEVERAGES         // Juices, tea, coffee, etc.
  DESSERTS          // Sweets, cakes, ice cream, etc.
  BAKERY            // Bread, buns, pastries, etc.
  GRAINS            // Rice, wheat, pulses, etc.
  LEFTOVERS         // Mixed prepared food
  EVENT_FOOD        // Food from events/functions
  CANTEEN_SURPLUS   // Excess from canteen
}

enum QuantityUnit {
  KG        // Kilograms
  GRAMS     // Grams
  LITERS    // Liters
  ML        // Milliliters
  PIECES    // Individual pieces
  PLATES    // Number of plates
  BOWLS     // Number of bowls
  PACKETS   // Number of packets
  BOXES     // Number of boxes
}

enum SpiceLevel {
  MILD
  MEDIUM
  SPICY
  VERY_SPICY
}

enum FoodStatus {
  AVAILABLE         // Available for pickup
  PARTIALLY_CLAIMED // Some quantity claimed
  FULLY_CLAIMED     // All quantity claimed
  EXPIRED           // Past safe consumption time
  COMPLETED         // All pickups completed
  CANCELLED         // Cancelled by donor
}

// ================================
// PICKUP MANAGEMENT
// ================================

model PickupRequest {
  id             String   @id @default(cuid())
  
  // Request Details
  requestedQty   Float              // Quantity requested
  message        String?            // Message from requester
  urgency        UrgencyLevel       @default(NORMAL)
  
  // Pickup Timing
  preferredPickupTime DateTime?      // When requester prefers pickup
  actualPickupTime    DateTime?      // When pickup actually happened
  estimatedArrival    DateTime?      // ETA provided by requester
  
  // Status & Tracking
  status         PickupStatus       @default(PENDING)
  
  // Confirmation & Communication
  donorConfirmedAt   DateTime?       // When donor confirmed
  requesterArrivedAt DateTime?       // When requester arrived
  completedAt        DateTime?       // When pickup was completed
  
  // Additional Info
  specialInstructions String?        // Special handling instructions
  contactMethod      ContactMethod   @default(APP) // How to contact
  
  // Timestamps
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  
  // Relations
  foodListingId  String
  foodListing    FoodListing        @relation(fields: [foodListingId], references: [id], onDelete: Cascade)
  
  requesterId    String
  requester      User               @relation(fields: [requesterId], references: [id], onDelete: Cascade)
  
  donorId        String
  donor          User               @relation("ReceivedPickups", fields: [donorId], references: [id], onDelete: Cascade)
  
  reviews        Review[]
  notifications  Notification[]
  
  @@map("pickup_requests")
}

enum PickupStatus {
  PENDING           // Waiting for donor approval
  CONFIRMED         // Donor approved the request
  IN_PROGRESS       // Requester is on the way
  READY_FOR_PICKUP  // Food is ready for collection
  COMPLETED         // Pickup completed successfully
  CANCELLED         // Cancelled by requester
  REJECTED          // Rejected by donor
  NO_SHOW           // Requester didn't show up
  EXPIRED           // Request expired
}

enum UrgencyLevel {
  LOW               // Can wait
  NORMAL            // Regular priority
  HIGH              // Needed soon
  URGENT            // Needed immediately
}

enum ContactMethod {
  APP               // Contact through app
  PHONE             // Phone call
  WHATSAPP          // WhatsApp message
  EMAIL             // Email contact
}

// ================================
// NOTIFICATIONS & COMMUNICATION
// ================================

model Notification {
  id          String   @id @default(cuid())
  
  // Content
  title       String
  message     String
  type        NotificationType
  priority    NotificationPriority @default(NORMAL)
  
  // Targeting
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Related Entities
  foodListingId    String?
  pickupRequestId  String?
  pickupRequest    PickupRequest? @relation(fields: [pickupRequestId], references: [id], onDelete: Cascade)
  
  // Status
  isRead      Boolean  @default(false)
  readAt      DateTime?
  
  // Delivery
  sentAt      DateTime?
  deliveredAt DateTime?
  
  // Additional Data
  actionUrl   String?  // URL to navigate when clicked
  imageUrl    String?  // Optional image
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("notifications")
}

enum NotificationType {
  FOOD_AVAILABLE        // New food available nearby
  PICKUP_REQUEST        // Someone requested your food
  PICKUP_CONFIRMED      // Your pickup request confirmed
  PICKUP_READY          // Food ready for pickup
  PICKUP_COMPLETED      // Pickup completed
  PICKUP_CANCELLED      // Pickup cancelled
  EXPIRY_WARNING        // Food expiring soon
  ACHIEVEMENT_UNLOCKED  // New achievement earned
  LEVEL_UP              // Level increased
  REMINDER              // General reminder
  SYSTEM_UPDATE         // System announcements
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// ================================
// REVIEWS & FEEDBACK
// ================================

model Review {
  id          String   @id @default(cuid())
  
  // Review Content
  rating      Int                    // 1-5 stars
  comment     String?
  reviewType  ReviewType
  
  // Aspects (for detailed feedback)
  qualityRating     Int?             // Food quality (1-5)
  quantityRating    Int?             // Quantity accuracy (1-5)
  timelinessRating  Int?             // Pickup timeliness (1-5)
  communicationRating Int?           // Communication quality (1-5)
  
  // Status
  isPublic    Boolean  @default(true)
  isVerified  Boolean  @default(false) // Verified as genuine review
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  reviewerId  String
  reviewer    User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  
  revieweeId  String
  reviewee    User     @relation("ReceivedReviews", fields: [revieweeId], references: [id], onDelete: Cascade)
  
  foodListingId String?
  foodListing   FoodListing? @relation(fields: [foodListingId], references: [id], onDelete: SetNull)
  
  pickupRequestId String?
  pickupRequest   PickupRequest? @relation(fields: [pickupRequestId], references: [id], onDelete: SetNull)
  
  @@map("reviews")
}

enum ReviewType {
  DONOR_TO_REQUESTER    // Donor reviewing requester
  REQUESTER_TO_DONOR    // Requester reviewing donor
  FOOD_QUALITY          // General food quality review
}

// ================================
// GAMIFICATION & ACHIEVEMENTS
// ================================

model Achievement {
  id          String   @id @default(cuid())
  
  // Basic Info
  name        String   @unique
  description String
  icon        String   // Icon identifier
  category    AchievementCategory
  
  // Requirements
  criteria    Json     // Flexible criteria definition
  points      Int      // Points awarded
  
  // Badge Design
  badgeColor  String   @default("#10B981")
  badgeImage  String?
  
  // Status
  isActive    Boolean  @default(true)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userAchievements UserAchievement[]
  
  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  
  // Progress
  progress      Float    @default(0) // Progress towards achievement (0-100)
  isCompleted   Boolean  @default(false)
  completedAt   DateTime?
  
  // Additional Data
  metadata      Json?    // Additional achievement-specific data
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

enum AchievementCategory {
  FOOD_SAVER        // Achievements for donating food
  FOOD_RESCUER      // Achievements for claiming food
  COMMUNITY_HELPER  // Achievements for helping community
  ENVIRONMENTAL     // Environmental impact achievements
  STREAK           // Consistency achievements
  MILESTONE        // Quantity/number milestones
  SOCIAL           // Social interaction achievements
  SPECIAL          // Special event achievements
}

// ================================
// EVENTS & LOGGING
// ================================

model Event {
  id          String   @id @default(cuid())
  
  // Event Details
  name        String
  description String?
  type        EventType
  
  // Location & Time
  location    String
  startTime   DateTime
  endTime     DateTime
  
  // Organizer Info
  organizerId String
  organizer   String   // Organization/department name
  contactInfo String?
  
  // Food Estimation
  expectedFoodWaste    Float?   // Expected waste in kg
  actualFoodWaste      Float?   // Actual waste recorded
  foodSaved           Float     @default(0) // Food saved through app
  
  // Status
  status      EventStatus @default(UPCOMING)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  eventLogs   EventLog[]
  
  @@map("events")
}

model EventLog {
  id          String   @id @default(cuid())
  
  // Log Details
  action      EventAction
  description String?
  metadata    Json?        // Additional structured data
  
  // Timestamps
  createdAt   DateTime     @default(now())
  
  // Relations
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  eventId     String?
  event       Event?       @relation(fields: [eventId], references: [id], onDelete: SetNull)
  
  foodListingId String?    @unique
  foodListing   FoodListing? @relation(fields: [foodListingId], references: [id], onDelete: SetNull)
  
  @@map("event_logs")
}

enum EventType {
  SEMINAR
  WORKSHOP
  CONFERENCE
  FEST
  CULTURAL_EVENT
  SPORTS_EVENT
  MEETING
  PARTY
  WEDDING
  OTHER
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum EventAction {
  FOOD_LISTED
  FOOD_CLAIMED
  FOOD_COMPLETED
  EVENT_LOGGED
  WASTE_REPORTED
  USER_JOINED
  USER_ACHIEVEMENT
}

// ================================
// NGO & VOLUNTEER MANAGEMENT
// ================================

model NGOProfile {
  id          String   @id @default(cuid())
  
  // Organization Details
  organizationName String
  registrationNumber String? @unique
  description     String?
  website         String?
  
  // Contact Information
  primaryContact  String
  alternateContact String?
  address         String
  pincode         String?
  
  // Service Areas
  serviceAreas    String[]  // Areas they serve
  maxCapacity     Int?      // Maximum people they can serve
  
  // Verification
  isVerified      Boolean   @default(false)
  verifiedAt      DateTime?
  verificationDocs String[] // Document URLs
  
  // Preferences
  preferredFoodTypes String[]
  pickupVehicles     String[] // ["bike", "car", "van", etc.]
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  bulkRequests    BulkPickupRequest[]
  volunteers      Volunteer[]
  
  @@map("ngo_profiles")
}

model BulkPickupRequest {
  id          String   @id @default(cuid())
  
  // Request Details
  title       String
  description String?
  minQuantity Float    // Minimum quantity needed
  maxQuantity Float?   // Maximum quantity they can handle
  
  // Timing
  neededBy    DateTime // When they need the food
  isRecurring Boolean  @default(false)
  recurringDays String[] // Days of week if recurring
  
  // Preferences
  preferredCategories FoodCategory[]
  avoidAllergens     String[]
  
  // Location
  pickupLocation     String
  canCollectFrom     String[] // Areas they can collect from
  
  // Status
  status      BulkRequestStatus @default(ACTIVE)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  ngoId       String
  ngo         NGOProfile @relation(fields: [ngoId], references: [id], onDelete: Cascade)
  
  @@map("bulk_pickup_requests")
}

model Volunteer {
  id          String   @id @default(cuid())
  
  // Personal Details
  name        String
  phoneNumber String
  email       String?
  
  // Availability
  availableDays String[] // Days available
  availableHours String  // Time range
  
  // Skills & Preferences
  hasVehicle    Boolean @default(false)
  vehicleType   String?
  maxDistance   Int     @default(5) // km
  
  // Status
  isActive      Boolean @default(true)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  ngoId         String
  ngo           NGOProfile @relation(fields: [ngoId], references: [id], onDelete: Cascade)
  
  @@map("volunteers")
}

enum BulkRequestStatus {
  ACTIVE
  PAUSED
  FULFILLED
  CANCELLED
}

// ================================
// ADMIN & REPORTING
// ================================

model AdminProfile {
  id          String   @id @default(cuid())
  
  // Admin Details
  role        AdminRole
  department  String?
  permissions String[]  // Array of permission strings
  
  // Access Control
  canManageUsers      Boolean @default(false)
  canManageFood       Boolean @default(false)
  canViewAnalytics    Boolean @default(true)
  canManageReports    Boolean @default(false)
  canManageSystem     Boolean @default(false)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("admin_profiles")
}

model Report {
  id          String   @id @default(cuid())
  
  // Report Details
  type        ReportType
  title       String
  description String
  severity    ReportSeverity @default(MEDIUM)
  
  // Evidence
  images      String[]
  attachments String[]
  
  // Status
  status      ReportStatus   @default(PENDING)
  resolution  String?
  resolvedAt  DateTime?
  
  // Additional Info
  metadata    Json?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  reporterId  String
  reporter    User     @relation("ReportsMade", fields: [reporterId], references: [id], onDelete: Cascade)
  
  reportedUserId String?
  reportedUser   User?  @relation("ReportsReceived", fields: [reportedUserId], references: [id], onDelete: SetNull)
  
  foodListingId  String?
  foodListing    FoodListing? @relation(fields: [foodListingId], references: [id], onDelete: SetNull)
  
  @@map("reports")
}

enum AdminRole {
  SUPER_ADMIN
  SYSTEM_ADMIN
  CAMPUS_ADMIN
  CANTEEN_ADMIN
  NGO_COORDINATOR
  MODERATOR
}

enum ReportType {
  INAPPROPRIATE_CONTENT
  FAKE_LISTING
  FOOD_SAFETY_CONCERN
  USER_MISCONDUCT
  SPAM
  TECHNICAL_ISSUE
  OTHER
}

enum ReportSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
  ESCALATED
}
